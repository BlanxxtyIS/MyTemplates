@typeparam TItem where TItem : class
@inject IDialogService DialogService
@inject HttpClient Http
@using System.Reflection
@using MudBlazor
@using System

<MudDataGrid Items="@Items" Filterable="false" SortMode="@SortMode.None" Groupable="false">
    <Columns>
        @foreach (var prop in GetProperties())
        {
            <PropertyColumn Property="@(x => prop.GetValue(x))" Title="@GetDisplayName(prop)" />
        }
        
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate Context="context">
                <MudStack Row>     
                    @if (HasRolesProperty()) {
                    <MudButton StartIcon="@Icons.Material.Filled.Api"
                               Variant="Variant.Filled"
                               Color="Color.Success"
                               Size="Size.Small"
                               OnClick="@(() => OpenRoleDialog(context.Item))">Роли</MudButton>
                    }
                    <MudButton StartIcon="@Icons.Material.Filled.Delete"
                               Variant="Variant.Filled" 
                               Color="Color.Error" 
                               Size="Size.Small"
                               OnClick="@(() => OpenDeleteDialog(context.Item))">Удалить</MudButton>
                    <MudButton Variant="Variant.Filled"
                               StartIcon="@Icons.Material.Filled.Edit"
                               Color="Color.Info"
                               Size="Size.Small"
                               OnClick="@(() => ShowEditDialog(context.Item))">Изменить</MudButton>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@code {
    [Parameter, EditorRequired]
    public IEnumerable<TItem> Items { get; set; }

    [Parameter]
    public IEnumerable<String> AvailableRoles { get; set; }

    [Parameter]
    public EventCallback<TItem> OnDeleteClick { get; set; }

    [Parameter]
    public EventCallback<TItem> OnEditSubmit { get; set; }

    [Parameter]
    public EventCallback<(TItem Item, List<string> Roles)> OnRolesChanged { get; set; }

    private IEnumerable<PropertyInfo> GetProperties()
    {
        return typeof(TItem)
        .GetProperties(BindingFlags.Public | BindingFlags.Instance)
        .Where(p => p.Name != "Roles");
    }

    private string GetDisplayName(PropertyInfo prop)
    {
        return prop.Name;
    }

    private async Task ShowEditDialog(TItem item)
    {
        var editItem = item;
        var parameters = new DialogParameters<AdminDialog<TItem>>
        {
            { x => x.Item, editItem },
            { x => x.OnSubmit, OnEditSubmit }
        };

        var dialog = await DialogService.ShowAsync<AdminDialog<TItem>>("EDit Item", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await OnEditSubmit.InvokeAsync(editItem);
        }
    }

    private async Task OpenDeleteDialog(TItem item)
    {
        var deleteItem = item;
        var parameters = new DialogParameters<DeleteDialog<TItem>>
        {
            { x => x.Item, deleteItem },
            { x => x.OnSubmit, OnDeleteClick }
        };
        var dialog = await DialogService.ShowAsync<DeleteDialog<TItem>>("Delete Item", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await OnDeleteClick.InvokeAsync(deleteItem);
        }
    }

    private async Task OpenRoleDialog(TItem item)
    {
        try
        {
            var rolesProperty = typeof(TItem).GetProperty("Roles");
            var activeRoles = (rolesProperty?.GetValue(item) as List<string>) ?? new List<string>();

            var parameters = new DialogParameters
                {
                    ["AvailableRoles"] = AvailableRoles,
                    ["ActiveRoles"] = activeRoles
                };

            var dialog = await DialogService.ShowAsync<RoleEditDialog>("Редактирование ролей", parameters);
            var result = await dialog.Result;

            if (!result.Canceled && result.Data is List<string> selectedRoles)
            {
                rolesProperty?.SetValue(item, selectedRoles);

                if (OnRolesChanged.HasDelegate)
                {
                    await OnRolesChanged.InvokeAsync((item, selectedRoles));
                }

                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in OpenRoleDialog: {ex.Message}");
        }
    }

    private bool HasRolesProperty()
    {
        return typeof(TItem).GetProperty("Roles") != null &&
               AvailableRoles != null &&
               AvailableRoles.Any();
    }
}

@* <AdminPage Items="@Elements"
           OnEditSubmit="@(async (Models item) => await HandleEditSubmit(item))"
           OnDeleteClick="@(async (Models item) => await HandleDelete(item))" />

@code {
    private List<Models> Elements = new List<Models>();

    protected override void OnInitialized()
    {
    Elements = new List<Models>
        {
            new Models { AlbumId = 1, Name = "Element 1", Description = "Description 1", AuthorName = "AuthorName 1", TimeInMinutes = 420, Rating
             = 1},
            new Models { AlbumId = 2, Name = "Element 2", Description = "Description 2", AuthorName = "AuthorName 2", TimeInMinutes = 420, Rating
             = 2},
            new Models { AlbumId = 3, Name = "Element 3", Description = "Description 3", AuthorName = "AuthorName 3", TimeInMinutes = 420, Rating
             = 3},
            new Models { AlbumId = 4, Name = "Element 4", Description = "Description 4", AuthorName = "AuthorName 4", TimeInMinutes = 420, Rating
             = 4},
            new Models { AlbumId = 5, Name = "Element 5", Description = "Description 5", AuthorName = "AuthorName 5", TimeInMinutes = 420, Rating
             = 5},
        };
    }
        
    private async Task HandleEditSubmit(Models updatedItem)
    {
        var index = Elements.FindIndex(e => e.AlbumId == updatedItem.AlbumId);
        if (index != -1)
        {
            Elements[index] = updatedItem;
            StateHasChanged(); // Это нужно оставить
        }
        Console.WriteLine($"Обновлен элемент с ID: {updatedItem.AlbumId}");
    }

    private async Task HandleDelete(Models itemToDelete)
    {
        Elements.Remove(itemToDelete);
        StateHasChanged(); // Это нужно оставить
        Console.WriteLine($"Удален элемент с ID: {itemToDelete.AlbumId}");
    }
} *@